// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=ACmuxOut);  //ALU output or A instruction fed to A register

    Mux(a=true,b=instruction[5],sel=instruction[15],out=ARegLoad);    //when load should be true for A register
    ARegister(in=ACmuxOut,load=ARegLoad,out=ARegOut,out[0..14]=addressM);

    Mux(a=false,b=instruction[4],sel=instruction[15],out=DRegLoad);  //when load should be true for D register
    DRegister(in=ALUout,load=DRegLoad,out=DRegOut);

    Mux(a=false,b=instruction[12],sel=instruction[15],out=AMload);   //to prevent AM Mux from loading during A instruction
    Mux16(a=ARegOut,b=inM,sel=AMload,out=AMout);  //AM Mux

    ALU(x=DRegOut,
        y=AMout,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        zr=isEqual,
        ng=isNegative,
        out=ALUout,
        out=outM
        );         //ALU 

    And(a=Jump,b=instruction[15],out=toLoad);
    Not(in=toLoad,out=notLoad);    // loading of counter
    PC(in=ARegOut,load=toLoad,inc=notLoad,reset=reset,out[0..14]=pc);
    
    Mux(a=false,b=instruction[3],sel=instruction[15],out=writeM);  // writeM pin out

    Not(in=isEqual,out=NotEqual);             // gets a value for not equal case
    Not(in=isNegative,out=isPositive);        // gets a value for positive case

    // Evaluation of jump 

    And(a=instruction[2],b=instruction[1],out=tempAnd1);
    And(a=tempAnd1,b=instruction[0],out=And1out);              

    And(a=instruction[2],b=NotEqual,out=tempAnd2);
    And(a=tempAnd2,b=isNegative,out=And2out);

    And(a=instruction[1],b=isEqual,out=tempAnd3);
    And(a=tempAnd3,b=isPositive,out=And3out);

    And(a=instruction[0],b=NotEqual,out=tempAnd4);
    And(a=tempAnd4,b=isPositive,out=And4out);

    Or(a=And1out,b=And2out,out=Or1out);
    Or(a=And3out,b=And4out,out=Or2out);
    Or(a=Or1out,b=Or2out,out=Jump);
}














